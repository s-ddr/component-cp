when generating the csv with faker data, could gen 10M but not 50M using nested for loops;
trying hard coded 5 isntead of second loop


generates 10M csv with faker in 22s
what happens when we run that function 5 times instead
inserting 10M takes 60s
repeat 5 times to get to 50M;
inserting 10000000 rows (43.51 sec);

//combined 5 csvs
//inserting 50M csv 
Query OK, 10000000 rows affected, 65535 warnings (9 min 34.15 sec)
Records: 50000000  Deleted: 0  Skipped: 40000000  Warnings: 40000000
//with incorrect ids// redoing with new incremented ids


//with corrected increment in id
LOAD DATA LOCAL INFILE '/Users/jbishow/Documents/Javascripts/Hack Reactor/System Design Capstone/component-cp/database/csv/data.csv' INTO TABLE chairs FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n' IGNORE 1 ROWS;
Query OK, 50000000 rows affected (5 min 12.99 sec)
Records: 50000000  Deleted: 0  Skipped: 0  Warnings: 0

select count(*) from chairs;
+----------+
| count(*) |
+----------+
| 50000000 |
+----------+
1 row in set (9.42 sec)

//query a single item takes 17s.
select * from chairs where collection_id = 9999999;
+----------+---------------+---------------+-----------------------------------------+-----------+-----------+---------------+---------+
| id       | name          | collection_id | url                                     | max_price | min_price | limited_offer | on_sale |
+----------+---------------+---------------+-----------------------------------------+-----------+-----------+---------------+---------+
| 10000000 | sunt 1        |       9999999 | http://lorempixel.com/640/480/transport |       854 |       670 |             1 |       1 |
| 20000000 | consequatur 2 |       9999999 | http://lorempixel.com/640/480/cats      |       441 |       415 |             1 |       1 |
| 30000000 | asperiores 3  |       9999999 | http://lorempixel.com/640/480/food      |       979 |       147 |             1 |       1 |
| 40000000 | atque 4       |       9999999 | http://lorempixel.com/640/480/people    |       496 |       976 |             1 |       1 |
| 50000000 | ut 5          |       9999999 | http://lorempixel.com/640/480/animals   |       824 |       572 |             1 |       1 |
+----------+---------------+---------------+-----------------------------------------+-----------+-----------+---------------+---------+
5 rows in set (16.91 sec)


//end of day July 24
//30sec to generate each csv (10M entries) times 5
//5sec to combine into one 50M csv;
//4 minutes to load 50M into database
  mysql> LOAD DATA LOCAL INFILE '/Users/jbishow/Documents/Javascripts/Hack Reactor/System Design Capstone/component-cp/database/csv/data.csv' INTO TABLE chairs FIELDS TERMINATED BY ',' LINES TERMINATED BY '\n' IGNORE 1 ROWS;
  Query OK, 50000000 rows affected (4 min 8.55 sec)
  Records: 50000000  Deleted: 0  Skipped: 0  Warnings: 0
//16.67sec to return by collection_id with small id
  mysql> select * from chairs where collection_id = 999;
  +----------+------------------------------------+---------------+-----------------------------------------+-----------+-----------+---------------+---------+
  | id       | name                               | collection_id | url                                     | max_price | min_price | limited_offer | on_sale |
  +----------+------------------------------------+---------------+-----------------------------------------+-----------+-----------+---------------+---------+
  |      999 | soluta-consectetur-voluptatem 999  |           999 | http://lorempixel.com/640/480/fashion   |       983 |        70 |             1 |       1 |
  | 10000999 | velit-aut-similique 999            |           999 | http://lorempixel.com/640/480/sports    |       486 |       455 |             1 |       1 |
  | 20000999 | occaecati-nihil-exercitationem 999 |           999 | http://lorempixel.com/640/480/business  |       478 |       923 |             1 |       1 |
  | 30000999 | atque-excepturi-cupiditate 999     |           999 | http://lorempixel.com/640/480/abstract  |       438 |       208 |             1 |       1 |
  | 40000999 | eligendi-et-laboriosam 999         |           999 | http://lorempixel.com/640/480/transport |       451 |       629 |             1 |       1 |
  +----------+------------------------------------+---------------+-----------------------------------------+-----------+-----------+---------------+---------+
  5 rows in set (16.67 sec)  
//20.5sec to return by collection_id with max id
  mysql> select * from chairs where collection_id = 49999999;
  +----------+---------------------------+---------------+-----------------------------------------+-----------+-----------+---------------+---------+
  | id       | name                      | collection_id | url                                     | max_price | min_price | limited_offer | on_sale |
  +----------+---------------------------+---------------+-----------------------------------------+-----------+-----------+---------------+---------+
  |  9999999 | enim-maxime-quia 9999999  |       9999999 | http://lorempixel.com/640/480/abstract  |       805 |       107 |             1 |       1 |
  | 19999999 | est-harum-est 9999999     |       9999999 | http://lorempixel.com/640/480/nightlife |       974 |        89 |             1 |       1 |
  | 29999999 | omnis-omnis-dolor 9999999 |       9999999 | http://lorempixel.com/640/480/people    |       386 |       336 |             1 |       1 |
  | 39999999 | similique-at-est 9999999  |       9999999 | http://lorempixel.com/640/480/technics  |       924 |       927 |             1 |       1 |
  | 49999999 | totam-ipsum-unde 9999999  |       9999999 | http://lorempixel.com/640/480/city      |       998 |       246 |             1 |       1 |
  +----------+---------------------------+---------------+-----------------------------------------+-----------+-----------+---------------+---------+
  5 rows in set (20.54 sec)

//query by name from early entry
mysql> select * from chairs where name = "velit-aut-similique 999";
+----------+-------------------------+---------------+--------------------------------------+-----------+-----------+---------------+---------+
| id       | name                    | collection_id | url                                  | max_price | min_price | limited_offer | on_sale |
+----------+-------------------------+---------------+--------------------------------------+-----------+-----------+---------------+---------+
| 10000999 | velit-aut-similique 999 |           999 | http://lorempixel.com/640/480/sports |       486 |       455 |             1 |       1 |
+----------+-------------------------+---------------+--------------------------------------+-----------+-----------+---------------+---------+
1 row in set (17.80 sec)

//query by name from late entry
mysql> select * from chairs where name = "totam-ipsum-unde 9999999";
+----------+--------------------------+---------------+------------------------------------+-----------+-----------+---------------+---------+
| id       | name                     | collection_id | url                                | max_price | min_price | limited_offer | on_sale |
+----------+--------------------------+---------------+------------------------------------+-----------+-----------+---------------+---------+
| 49999999 | totam-ipsum-unde 9999999 |       9999999 | http://lorempixel.com/640/480/city |       998 |       246 |             1 |       1 |
+----------+--------------------------+---------------+------------------------------------+-----------+-----------+---------------+---------+
1 row in set (17.95 sec)

//july 25 measure csv generation with npm script with 16GB memmory
node --max-old-space-size=16384 database/csvgen1.js & node --max-old-space-size=16384 database/csvgen2.js & node --max-old-space-size=16384 database/csvgen3.js & node --max-old-space-size=16384 database/csvgen4.js & node --max-old-space-size=16384 database/csvgen5.js,
in parallel makes 5 10M large csv in 8m33s

node --max-old-space-size=16384 database/csvgen1.js; node --max-old-space-size=16384 database/csvgen2.js; node --max-old-space-size=16384 database/csvgen3.js; node --max-old-space-size=16384 database/csvgen4.js; node --max-old-space-size=16384 database/csvgen5.js",
in sequence makes 5 10M large csv in 8m45s

seeds database in 3 min 41.66 sec


//July 26
add more uniqueness to name field;
look into adding index for faster queries
used $
alter table chairs add index collection_id (collection_id);

combined generation of csv, cat csv, insert csv, index db into one npm script
  generates, inserts, and indexes db in 14min26seconds with minimal ram usage

testing queries after indexing
  sequelize findAll where collection_id=...
    Executing (default): SELECT `id`, `name`, `collection_id`, `url`, `max_price`, `min_price`, `limited_offer`, `on_sale` FROM `chairs` AS `chairs` WHERE `chairs`.`collection_id` = 9999999;
    GET /products-id/9999999 200 4.600 ms - 910
  sequelize raw query by collection_id=...
    Executing (default): SELECT * FROM chairs where collection_id=9999997
    GET /products-idraw/9999997 200 1.894 ms - 918
  sequelize raw query by id= or id= or id= or id= or id=
    Executing (default): SELECT * FROM chairs where id=9999998 or id=19999998 or id=29999998 or id=39999998 or id=49999998
    GET /products-raw/9999998 200 2.644 ms - 919


//July 27
instantiate a mongo db with csv
mongoimport --db collection --collection chairs --type csv --headerline --file database/csv/data.csv
start time 2019-07-27T14:13:36.767-0700
end time   2019-07-27T14:27:43.408-0700
seed time  14min6.641seconds

started by including index in mongoose schema creation,
queries by collection_id take 1ms for late entries and 0ms for early ones.
  > db.chairs.find({collection_id:10000000}).pretty().explain("executionStats")

//July 28
had trouble installing artillery globally (or at all)
solution https://github.com/artilleryio/artillery/issues/548

initial artillery tests
artillery quick -r 1000 -d 60 http://localhost:3002/collection/sql/99999997

//July 39-31
//search by name or range of max_price
  //compare indexing types btree hash.
//sql
real	16m13.816s
user	16m9.049s
sys	4m14.674s

//with three indexes
2019-07-30T14:08:58.862-0700
2019-07-30T14:40:29.955-0700

db.chairs.find({max_price:10, min_price:{$gt:9}}).limit(2).pretty()

//with one index
2019-07-30T15:34:19.848-0700
2019-07-30T15:50:30.280-0700
real	16m13.816s
user	16m9.049s
sys	4m14.674s

//use gitlog to track indexing times
db.adminCommand( { getLog : "global" } )

//with no index  10m56s
2019-07-31T10:51:57.948-0700	connected to: localhost
2019-07-31T11:02:53.952-0700
real	10m56.378s
user	14m34.379s
sys	3m42.015s

//and adding an index 2m36s
2019-07-31T11:24:56.630-0700 I INDEX
2019-07-31T11:27:32.331-0700

db.chairs.find({$or : [{collection_id:{$lt:5}},{collection_id:{$gt:9999996}}]})


*~~~~~~MongoDB / GET~~~~~~*

query to get collection of reccomended items for a given item_id
localhost:3002/collection/mongo/:id
chairs.find({ collection_id: id })

localhost:3002/collection/mongo/1813208   |   Time: 6.98ms

localhost:3002/collection/mongo/10000000  |   Time: 5.53ms

localhost:3002/collection/mongo/9000010   |   Time: 5.51ms

localhost:3002/collection/mongo/10        |   Time: 5.31ms

*~~~~~~MySQL . GET~~~~~~*

query to get collection of reccomended items for a given item_id
localhost:3002/collection/sql/:id
SELECT * FROM chairs WHERE collection_id=${+id}

localhost:3002/collection/sql/1813208   |   Time: 17.72ms

localhost:3002/collection/sql/10000000  |   Time: 17.24ms

localhost:3002/collection/sql/9000010   |   Time: 17.29ms 

localhost:3002/collection/sql/10        |   Time: 9.68ms

//new csv generation
  ~70M in 3m53.941s
//seed mongo in 23m16.8s with index pre-established
//seed mongo in 16m57.645s without index


//seed and index mysql	8m43.709s

//Aug 1  -  Stress testing on local
//mongo test
duration: 60
arrivalRate: 5
loop count: 2000
All virtual users finished
Summary report @ 14:57:09(-0700) 2019-08-01
  Scenarios launched:  300
  Scenarios completed: 300
  Requests completed:  600000
  RPS sent: 1120.76
  Request latency:
    min: 1.2
    max: 696.2
    median: 223.7
    p95: 363.4
    p99: 421.5
  Scenario counts:
    0: 300 (100%)
  Codes:
    200: 600000

//mysql test
duration: 60
arrivalRate: 5
loop count: 2000
All virtual users finished
Summary report @ 15:09:52(-0700) 2019-08-01
  Scenarios launched:  300
  Scenarios completed: 300
  Requests completed:  600000
  RPS sent: 1257.12
  Request latency:ww
    min: 1.3
    max: 389.3
    median: 210.7
    p95: 300.7
    p99: 315.9
  Scenario counts:
    0: 300 (100%)
  Codes:
    200: 600000

//Aug 2 Setting up EC2 instance

to ssh into terminal

ssh -i /Users/jbishow/Documents/AmazonAWS/jeremy.pem ec2-user@ec2-52-53-232-190.us-west-1.compute.amazonaws.com

